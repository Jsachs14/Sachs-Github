class Pong {
    static Pong pong;
    field Paddle paddle;
    field Ball ball;
    field int score;
    field int wall, lastWall,padWidth;

    field boolean gameOver;

    constructor Pong new() {
        do Screen.clearScreen();
        let padWidth = 50;
        let paddle = Paddle.new(230,229,padWidth,7);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
        do ball.SetDestination(400,0);
        let score = 0;
        do score_init();

        let gameOver = false;
        let wall = 0;
        let lastWall = 0;

        return this;
    }



    method void score_init() {
        do Screen.drawRectangle(0,238,511,240);
        do Output.moveCursor(22,0);
        do Output.printString("Score: 0");
        return;
    }

    method void score_update() {
        let score = score + 1;
        do Output.moveCursor(22,7);
        do Output.printInt(score);
        return;
    }



    method void dispose() {
        do paddle.dispose();
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function void startPong() {
        let pong = Pong.new();
        return;
    }

    function Pong getPong() {
        return pong;
    }

    method void runPong() {
        var char keyIn;

        while (~gameOver) {
            while ((keyIn=0) & (~gameOver)) {
                let keyIn = Keyboard.keyPressed();
                do paddle.move();
            }

            if (keyIn = 130) {
                do paddle.setDir(1);
            }
            else {
                if (keyIn = 132) {
                    do paddle.setDir(2);
                }
                else {
                    if (keyIn = 140) {
                        let gameOver = true;
                    }
                }
            }

            while ((~(keyIn=0)) & (~gameOver)) {
                let keyIn = Keyboard.keyPressed();
                do paddle.move();
                do Sys.wait(100);
                do ball.move();
                do Sys.wait(100);
            }
        }

        if (gameOver) {
            do Screen.clearScreen();
            do Output.moveCursor(10,27);
            do Output.printString("YOU LOST");
        }

        return;
    }


    method void BallMove() {
        var int BDir, padLeft, padRight, ballLeft, ballRight;
        var boolean wallcheck1;
        var boolean hitpaddle;
        var int pad_dec;

        let wall = ball.move();
        let wallcheck1 = ((wall > 0) & (~(wall = lastWall)));
        let pad_dec = 4;

        if (wallcheck1) {
            let lastWall = wall;
            let BDir = 0;
            let padLeft = paddle.getLeft();
            let padRight = paddle.getRight();
            let ballLeft = ball.getLBall();
            let ballRight = ball.getRBall();

            if (wall = 4) {
                let hitpaddle = ((ballLeft > padRight) | (ballRight < padLeft));
                let gameOver = hitpaddle;

                if (~gameOver) {
                    //bouncing direction splitter

                    if (ballRight < padLeft+padWidth/4) {
                        let BDir = -1;
                    }
                    else {
                        if (ballLeft > padRight-padWidth/4) {
                            let BDir = 1;
                        }
                        
                    }

                    let padWidth = padWidth - pad_dec;
                    do paddle.setWidth(padWidth);
                    do score_update();
                }
                
            }

            do ball.bounce(BDir);
        }

        return;

        
    }


}

