class Ball {
    field int x,y,lx,ly;

    field int d,straightD,diagD;
    field boolean invert, posx, posy;

    field int lW,rW,tW,bW;
    field int wall;

    constructor Ball new(int Ax, int Ay, int AlW, int ArW, int AtW, int AbW) {
       let x = Ax;
       let y = Ay;
       let lW = AlW;
       let rW = ArW-6;
       let tW = AtW;
       let bW = AbW-6;
       let wall = 0;
       do show();
       return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    method void draw() {
        do Screen.drawRectangle(x,y,x+5,y+5);
        return;
    }

    //getter methods

    method int getXL() {
        return x;
    }

    method int getXR() {
        return x+5;
    }

    method void setDest(int destx, int desty) {
        var int dx, dy, temp;
        let lx = destx-x;
        let ly = desty-y;
        let dx = Math.abs(lx);
        let dy = Math.abs(ly);
        let invert = (dx<dy);

        if (invert) {
            let temp = dx;
            let dx = dy;
            let dy = temp;

            let posx = (y<desty);
            let posy = (x<destx);
        }
        else {
            let posx = (x<destx);
            let posy = (y<desty);
        }

        let d = (2*dy)-dx;
        let straightD = 2*dy;
        let diagD = 2*(dy-dx);

        return;
    }
    //return 0 if hasnt reached a wall and a value about which wall if it has
    method int move() {
        do hide();
        if (d<0) {
            let d = d+straightD;
        }
        else {
            let d = d+diagD;
            if (posy) {
                if (invert) {
                    let x = x+4;
                }
                else {
                    let y = y+4;
                }
            }
            else {
                if (invert) {
                    let x = x-4;
                }
                else {
                    let y = y-4;
                }
            }
        }

        if (posx) {
            if (invert) {
                let y = y+4;
            }
            else {
                let x = x+4;
            }
        }
        else {
            if (invert) {
                let y = y-4;
            }
            else {
                let x = x-4;
            }
        }

        if (~(x>lW)) {
            let wall = 1;
            let x = lW;
        }

        if (~(x<rW)) {
            let wall = 2;
            let x = rW;
        }

        if (~(y>tW)) {
            let wall = 3;
            let y = tW;
        }

        if (~(y<bW)) {
            let wall = 4;
            let y = bW;
        }

        do show();

        return wall;



    }

    method void bounce(int Bdir) {
        var int newx,newy,divlx,divly,factor;

        let divlx = lx/10;
        let divly = ly/10;

        if (Bdir=0){
            let factor = 2;
        }
        else {
            if ((~lx<0) & (Bdir = 1) | (lx<0) & (Bdir = -1)) {
                let factor = 4;
            }
            else {
                let factor = 1;
            }
        }

        if (wall = 1) {
            let newx = 506;
            let newy = (divly*(-10))/divlx;
            let newy = y + (newy*factor);
        }
        else {
            if (wall = 2) {
                let newx = 0;
                let newy = (divly*(10))/divlx;
                let newy = y + (newy*factor);
            }
            else {
                if (wall = 3) {
                    let newy = 250;
                    let newx = (divlx*(-5))/divly;
                    let newx = x + (newx*factor);
                }
                else {
                    //wall is 4
                    let newy = 0;
                    let newx = (divlx*(5))/divly;
                    let newx = x + (newx*factor);
                }
            }
        }

        do setDest(newx,newy);

        return;
    }



}